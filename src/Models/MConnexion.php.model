<?php

namespace Nostromo\Models;

use Nostromo\Classes\Exception\ErrorSQLException;
use PDO;
use PDOException;
use UnexpectedValueException;

/**
 * Class MConnexion
 * @package Nostromo\Models
 */
class MConnexion
{
    /**
     * Permet de connecter à la base de données afin d'avoir accès
     * au driver PDO
     *
     * @return PDO
     */
    public static function getBdd()
    {
        $hote = 'localhost';
        $base = 'myDbName';
        $user = 'myUser';
        $mdp = 'myPassword';
        try {
            $pdo = new PDO(
                'mysql:host=' . $hote . ';dbname=' . $base . ';charset=utf8',
                $user,
                $mdp,
                array(PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION)
            );

            return $pdo;
        } catch (PDOException $ex) {
            echo $ex->getMessage();
        }
    }

    /**
     * User connected.
     *
     * @return bool
     */
    public static function sessionOuverte()
    {
        return array_key_exists('Utilisateur', $_SESSION);
    }

    /**
     * Ajoute un message flash dans les variables de session.
     *
     * @param string $message Message
     * @param string $type    Type de validation
     */
    public static function setFlashMessage($message = 'Erreur inconnue', $type = 'error')
    {
        switch ($type) {
            case 'valid':
                $_SESSION['valid'] = $message;
                if (array_key_exists('error', $_SESSION)) {
                    unset($_SESSION['error']);
                }
                break;
            case 'error':
                $_SESSION['error'] = $message;
                if (array_key_exists('valid', $_SESSION)) {
                    unset($_SESSION['valid']);
                }
                break;
            default:
                $_SESSION['error'] = 'Type d\'erreur inconnu';
                break;
        }
    }

    /**
     * Permet de récupérer le nouveau id de commande qui sera généré
     * via le auto_increment de la base de données
     *
     * @return int
     *
     * @throws ErrorSQLException
     */
    public static function getLastIdCommande()
    {
        $conn = self::getBdd();
        try {
            $req = "SELECT `AUTO_INCREMENT` as AI
            FROM  INFORMATION_SCHEMA.TABLES
            WHERE TABLE_SCHEMA = '2014-nostromo_base'
            AND   TABLE_NAME   = 'commande';";
            $req = $conn->query($req);
            $req = $req->fetch();
            return (int) $req['AI'];
        } catch (PDOException $e) {
            throw new ErrorSQLException($e->getMessage());
        }
    }

    /**
     * Permet de récupérer le nouveau id de réservation qui sera généré
     * via le auto_increment de la base de données
     *
     * @return int
     *
     * @throws ErrorSQLException
     */
    public static function getLastIdReservation()
    {
        $conn = self::getBdd();
        try {
            $req = "SELECT `AUTO_INCREMENT` as AI
            FROM  INFORMATION_SCHEMA.TABLES
            WHERE TABLE_SCHEMA = '2014-nostromo_base'
            AND   TABLE_NAME   = 'reservation';";
            $req = $conn->query($req);
            $req = $req->fetch();
            return (int) $req['AI'];
        } catch (PDOException $e) {
            throw new ErrorSQLException($e->getMessage());
        }
    }
}
